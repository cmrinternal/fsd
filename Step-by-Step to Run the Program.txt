Step-by-Step to Run the Program
________________________________________
1. Install Node.js (if you don't have it)
â€¢	Download and install Node.js from here:
ðŸ‘‰ https://nodejs.org/
â€¢	After installing, check versions:
node -v
npm -v
If you see versions, Node is installed âœ…
________________________________________
2. Install Angular CLI
CLI = Command Line Interface to easily create and run Angular projects.
In your terminal (CMD or PowerShell or terminal in VSCode):
npm install -g @angular/cli
Check Angular version:
ng version
âœ… If you see Angular CLI version, you're good.
________________________________________
3. Create a New Angular Project
ng new my-angular-app
It will ask:
â€¢	Would you like to add Angular routing? â†’ No (for now)
â€¢	Which stylesheet format? â†’ CSS
It will create a folder my-angular-app/ with all files.
________________________________________
4. Move into Your Project Folder
cd my-angular-app
________________________________________
5. Create a Service
Run:
ng generate service my-data
This command will create:
â€¢	src/app/my-data.service.ts
â€¢	and a test file (you can ignore test files for now)
________________________________________
6. Create/Edit Your Component
You already have a default AppComponent created inside:
â€¢	src/app/app.component.ts
â€¢	src/app/app.component.html
We'll update these:
ðŸ‘‰ First, update app.module.ts
Open src/app/app.module.ts and add:
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  imports: [
    HttpClientModule
  ],
})
(Without this, HTTP won't work!)
________________________________________
ðŸ‘‰ Now, modify app.component.ts
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';   
// <-- import CommonModule

@Component({
  selector: 'app-root',
  standalone: true,               // <-- important in Angular 17+
  imports: [CommonModule],         // <-- import CommonModule here
  template: `
    <div *ngIf="data">
      <pre>{{ data | json }}</pre>
    </div>
  `
})
export class AppComponent {
  data = { message: "Hello World" };
}________________________________________
ðŸ‘‰ Then modify my-data.service.ts
Open src/app/my-data.service.ts and write:
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
 
@Injectable({
  providedIn: 'root'
})
export class MyDataService {

  constructor(private http: HttpClient) {}

  getData(): Observable<any> {
    return this.http.get('https://jsonplaceholder.typicode.com/posts');
    // I used a public free API here.
  }
}
________________________________________
âœ… Now your basic setup is ready!
________________________________________
7. Start the Angular App
Run:
ng serve
or
ng serve --open
(The --open flag automatically opens the browser.)
________________________________________
Good question â€” let's break it down simply:
When you hear "free fake users API", it usually means:
â€¢	It's an API (Application Programming Interface) â€” meaning a service you can call from your app or code to get some data.
â€¢	It gives you fake (dummy) user data â€” like names, emails, profile pictures, addresses â€” not real people.
â€¢	It's free â€” you don't have to pay for it.
â€¢	Developers use it for testing or practice, especially when they don't have real data yet.
JSONPlaceholder â†’ Gives fake posts, comments, users, etc.
Alright, so â€” when you go to https://jsonplaceholder.typicode.com/users,
youâ€™re looking at a free, fake API endpoint that gives you a list of dummy users in JSON format.
Here's whatâ€™s happening exactly:
â€¢	jsonplaceholder.typicode.com is a website that provides fake APIs for practice â€” no real database, no real users â€” just made-up data for developers to use.
â€¢	/users is the specific route (or endpoint) that gives you fake user data.
Full Steps to Execute the Program
âœ… Step 1: Make sure you have Node.js and Angular CLI installed
â€¢	Check Node.js:
node -v
If not installed, download it from nodejs.org.
â€¢	Check Angular CLI:
ng version
If you don't have it, install Angular CLI globally:
npm install -g @angular/cli
________________________________________
âœ… Step 2: Create a new Angular Project (if you haven't)
In your terminal or command prompt:
ng new my-form-app
cd my-form-app
When it asks:
â€¢	Would you like to add Angular routing? â†’ No (unless you want)
â€¢	Which stylesheet format? â†’ CSS
________________________________________
âœ… Step 3: Generate a Service (for submitting data)
Inside the project folder:
ng generate service data
It will create src/app/data.service.ts.
You write this inside it:
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DataService {

  private apiUrl = 'https://your-api-endpoint.com/data'; // <-- PUT YOUR API URL

  constructor(private http: HttpClient) { }

  submitData(data: any): Observable<any> {
    return this.http.post(this.apiUrl, data);
  }
}
âœ… Don't forget to replace apiUrl with your real backend URL!
(If you don't have a backend yet, we can use a free mock server like https://webhook.site/).
________________________________________
âœ… Step 4: Write your Component Code
In src/app/app.component.ts:
import { Component } from '@angular/core';
import { DataService } from './data.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent {
  userData = {
    name: '',
    email: ''
  };

  constructor(private dataService: DataService) {}

  onSubmit() {
    this.dataService.submitData(this.userData).subscribe(
      (response) => {
        console.log('Data submitted successfully', response);
      },
      (error) => {
        console.error('Error submitting data', error);
      }
    );
  }
}
________________________________________
âœ… Step 5: Write your Form HTML
In src/app/app.component.html:
<form (ngSubmit)="onSubmit()">
  <input type="text" [(ngModel)]="userData.name" name="name" placeholder="Name" required>
  <input type="email" [(ngModel)]="userData.email" name="email" placeholder="Email" required>
  <button type="submit">Submit</button>
</form>
________________________________________
âœ… Step 6: Make sure your app.module.ts has FormsModule and HttpClientModule
In src/app/app.module.ts:
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule, HttpClientModule],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}
________________________________________
âœ… Step 7: Run the Application
In the terminal inside your project:
ng serve
âœ… After it's built successfully, open your browser and go to:
http://localhost:4200/
You will see your form! ðŸŽ‰
â€¢	Fill in Name and Email
â€¢	Click Submit
â€¢	Check the browser console (F12 > Console tab)
o	If successful â†’ youâ€™ll see the success message.
o	If error â†’ youâ€™ll see an error message.
________________________________________
https://webhook.site/ â†’ Free tool to instantly receive POST requests and view the data

